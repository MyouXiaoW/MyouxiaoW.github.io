<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦游小王</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-24T14:10:03.340Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梦游小王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解构赋值</title>
    <link href="http://yoursite.com/2018/05/24/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2018/05/24/解构赋值/</id>
    <published>2018-05-24T12:31:39.000Z</published>
    <updated>2018-05-24T14:10:03.340Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h1><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>只要左右两边的模式相同，左边的变量就会被赋予对应的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c]=[1,2,3]</span><br><span class="line"></span><br><span class="line">let [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class="line"></span><br><span class="line">let [x, , y] = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let [head, ...tail] = [1, 2, 3, 4];</span><br><span class="line"></span><br><span class="line">let [x, y, ...z] = [&apos;a&apos;]</span><br></pre></td></tr></table></figure></p><p>还有另外一种形式:先看右边的，如果右边没有，看等号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [x=y, y=5] = [&apos;a&apos;,7];</span><br><span class="line"></span><br><span class="line">let [x=5, y=5] = [,7]</span><br></pre></td></tr></table></figure><p>右边内容必须是严格的===判断例如undefiend就是没有，null就是有<br>默认值生效的条件是，对象的属性值严格等于undefined。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let [x = 1] = [undefined];</span><br><span class="line">x // 1</span><br><span class="line"></span><br><span class="line">let [x = 1] = [null];</span><br><span class="line">x // null</span><br></pre></td></tr></table></figure></p><h2 id="嵌套模式"><a href="#嵌套模式" class="headerlink" title="嵌套模式"></a>嵌套模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a, [b], d] = [1, [2, 3], 4];</span><br></pre></td></tr></table></figure><hr><h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><h2 id="对象解构赋值与数组解构赋值的不同"><a href="#对象解构赋值与数组解构赋值的不同" class="headerlink" title="对象解构赋值与数组解构赋值的不同"></a>对象解构赋值与数组解构赋值的不同</h2><p>因为数组的解构赋值是有顺序的，但是对象是无序的，所以对象在使用解构赋值的时候变量必须要跟属性同名才可以。</p><p>如果变量名和属性名不同，那就可以用以下的方式来写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;</span><br><span class="line">baz // &quot;aaa&quot;</span><br></pre></td></tr></table></figure></p><h2 id="嵌套模式-1"><a href="#嵌套模式-1" class="headerlink" title="嵌套模式"></a>嵌套模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    &apos;Hello&apos;,</span><br><span class="line">    &#123; y: &apos;World&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let &#123; p, p: [x, &#123; y &#125;] &#125; = obj;</span><br></pre></td></tr></table></figure><p>如果在之前有变量名了，在解构的过程中就可以不用写let了但是需要加上（）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x;</span><br><span class="line">(&#123;x&#125;=&#123;x:1&#125;);</span><br></pre></td></tr></table></figure><p>{x}是一个代码块，会发生语法错误，大括号不在行首就可以避免{x}被解析成代码块</p><p>默认值生效的条件是，对象的属性值严格等于undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let &#123;x:y=3&#125;=&#123;x:undefined&#125;</span><br><span class="line"></span><br><span class="line">let &#123;x:y=3&#125;=&#123;&#125;</span><br><span class="line"></span><br><span class="line">let &#123;x:y=3&#125;=&#123;x:null&#125;</span><br></pre></td></tr></table></figure><h2 id="实际的应用"><a href="#实际的应用" class="headerlink" title="实际的应用"></a>实际的应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let  &#123;left，right，top：Top&#125;=getcompletedStyle（div）</span><br></pre></td></tr></table></figure><p>右边的getcompletedStyle（div）上面有很多属性，可以用解构赋值的方法一次性的获取想要的所有属性值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;数组的解构赋值&quot;&gt;&lt;a href=&quot;#数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组的解构赋值&quot;&gt;&lt;/a&gt;数组的解构赋值&lt;/h1&gt;&lt;h2 id=&quot;匹配模式&quot;&gt;&lt;a href=&quot;#匹配模式&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="ES6 解构赋值" scheme="http://yoursite.com/tags/ES6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>简单的记录promise</title>
    <link href="http://yoursite.com/2018/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%B0%E5%BD%95promise/"/>
    <id>http://yoursite.com/2018/05/23/简单的记录promise/</id>
    <published>2018-05-23T14:13:24.000Z</published>
    <updated>2018-05-24T04:34:52.856Z</updated>
    
    <content type="html"><![CDATA[<hr><p>&emsp;在学习AJAX的过程中我有很多的不能够理解的地方，例如同步和异步，虽然能有简单的例子给我参考，但是我还是有点模糊，之后又遇到了promise这个ES6中新的属性，我就更加的晕了。但是学习的过程就是这样的，不奢望自己能够一蹴而就，只要自己能够坚持住就满足了。晚上回来之后就开始琢磨promise到底是个什么鬼东西，看了几篇文章，也看了阮一峰的ES6入门，算是对它的方法有了一点点的了解，现在只能说是在这里把它记录下来，方便自己以后更深入的学习。</p><hr><h2 id="promise的三种状态"><a href="#promise的三种状态" class="headerlink" title="promise的三种状态"></a>promise的三种状态</h2><p>&emsp;在看得时候不奢求理解只是想记下来它的三个状态：pending（等待态）、fufiled（成功态）、rejected（失败态）</p><hr><h2 id="promise解决的两个问题"><a href="#promise解决的两个问题" class="headerlink" title="promise解决的两个问题"></a>promise解决的两个问题</h2><p>&emsp;1、回调地狱的问题，解决代码难以维护，第一个函数的输出是第二个函数的输入。<br>&emsp;2、支持多个并发的请示，并获得并发的请求数据。</p><hr><h2 id="promise接收的参数"><a href="#promise接收的参数" class="headerlink" title="promise接收的参数"></a>promise接收的参数</h2><p>&emsp;promise接收一个参数这是阮大神说的，我的理解就是promise只接收一种参数，就是函数，但是要传入两个参数分别是：<br>&emsp;resolve：异步操作执行成功后的回调函数。<br>&emsp;reject：异步操作执行失败后的回调函数。<br>&emsp;这里引用了阮大神的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  // ... some code</span><br><span class="line"></span><br><span class="line">  if (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h2 id="then的链式操作"><a href="#then的链式操作" class="headerlink" title="then的链式操作"></a>then的链式操作</h2><p>&emsp;then这个链式操作中有两个参数一个是resolve的回调另一个就是reject的回调。当p对象的状态是resolved的时候后调用，另一个是p对象的状态是reject的时候调用。第二个参数可以不写。这两个函数可以接受p传出的值作为参数。</p><hr><h2 id="catch的操作"><a href="#catch的操作" class="headerlink" title="catch的操作"></a>catch的操作</h2><p>&emsp;catch是指定reject的回调，在then的第一个参数resolve中出现异常并不会卡死，才继续带catch中。</p><hr><h2 id="all的用法"><a href="#all的用法" class="headerlink" title="all的用法"></a>all的用法</h2><p>&emsp;all的用法简单来说就是谁最后走完就以谁为准执行回调。<br>&emsp;all接收一个数组，数组中都是promise的实例。</p><hr><h2 id="race的用法"><a href="#race的用法" class="headerlink" title="race的用法"></a>race的用法</h2><p>&emsp;race的用法就是谁跑的快就以谁为准执行回调。<br>&emsp;race也是接收一个数组，数组中都是promise的实例。</p><hr><p>&emsp;以上就是我自己记录的一些关于promise的方法，由于理解不深刻没办法用实例更清楚的说明，但是弄明白之后会在以后的bolg中以实例说明的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&amp;emsp;在学习AJAX的过程中我有很多的不能够理解的地方，例如同步和异步，虽然能有简单的例子给我参考，但是我还是有点模糊，之后又遇到了promise这个ES6中新的属性，我就更加的晕了。但是学习的过程就是这样的，不奢望自己能够一蹴而就，只要自己能够坚持住就满足
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="ES6 promise" scheme="http://yoursite.com/tags/ES6-promise/"/>
    
  </entry>
  
  <entry>
    <title>git上传代码的指令</title>
    <link href="http://yoursite.com/2018/05/22/git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/22/git上传代码的指令/</id>
    <published>2018-05-22T12:51:59.000Z</published>
    <updated>2018-05-24T04:34:51.432Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="首先要理解git的工作原理"><a href="#首先要理解git的工作原理" class="headerlink" title="首先要理解git的工作原理"></a>首先要理解git的工作原理</h2><p>   &emsp;git是分布式的工作原理，自己的电脑就是一个服务器，每次写的代码都可以保存到自己的电脑中，并有相对应的版本号，即使文件不小心被删除了，也可以根据版本号进行恢复。</p><p>   &emsp;在git工作的时候其中有三个分区：分别是工作区、暂存区、版本区。</p><h2 id="上传的指令"><a href="#上传的指令" class="headerlink" title="上传的指令"></a>上传的指令</h2><p>   &emsp;在我们写代码的时候就是在工作区进行的操作，每次写入的代码都会保存在工作区里面，但是在不小心删除工作区的文件的时候，文件就会被删除了，为了恢复被删除的文件就需要先把文件上传，分为以下两个步骤：<br>   &emsp;1、把文件由工作区上传到暂存区分为两种方法<br>   &emsp;第一种：上传一个文件到暂存区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add  文件的名字</span><br></pre></td></tr></table></figure></p><p>   &emsp;第二种：上传全部的工作区文件到暂存区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></p><p>   &emsp;2、把文件上传到版本区也是有两种方法<br>   &emsp;第一种是把暂存区所有的文件都上传到版本区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure></p><p>   &emsp;第二种是从工作区上传到版本区，但是这种方法的前提是要上传的文件被commit过的才行，有局限性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m &quot;注释&quot;</span><br></pre></td></tr></table></figure></p><hr><h2 id="git三个分区内文件内容的比较指令"><a href="#git三个分区内文件内容的比较指令" class="headerlink" title="git三个分区内文件内容的比较指令"></a>git三个分区内文件内容的比较指令</h2><p>&emsp;1、工作区和暂存区的比较指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure></p><p>&emsp;2、暂存区和版本区的比较指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure></p><p>&emsp;3、工作区和版本区的比较指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff master</span><br></pre></td></tr></table></figure></p><p>&emsp;对于以上三个指令，在输入指令后会在git bash上显示两个想比较的分区中同一个文件的改动之处</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;首先要理解git的工作原理&quot;&gt;&lt;a href=&quot;#首先要理解git的工作原理&quot; class=&quot;headerlink&quot; title=&quot;首先要理解git的工作原理&quot;&gt;&lt;/a&gt;首先要理解git的工作原理&lt;/h2&gt;&lt;p&gt;   &amp;emsp;git是分布式的工作原理
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git同步数据</title>
    <link href="http://yoursite.com/2018/05/21/git%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/05/21/git同步数据/</id>
    <published>2018-05-21T14:16:52.000Z</published>
    <updated>2018-05-21T14:17:16.404Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="第一种git和github一起操作的"><a href="#第一种git和github一起操作的" class="headerlink" title="第一种git和github一起操作的"></a>第一种git和github一起操作的</h2><h3 id="第一次的操作"><a href="#第一次的操作" class="headerlink" title="第一次的操作"></a>第一次的操作</h3><p>1、新建一个文件夹files<br>2、在github上找到想要下载下来的文件点击右上角的fork<br>3、点击clone or download（绿色的） 复制下网址<br>4、打开文件夹flies，在flies里面运行git bash输入以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://XXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></p><p>输入上面指令后再输入以下指令就可以把文件下载到本地了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><h3 id="在别人完成了文件的更新之后进行以下操作"><a href="#在别人完成了文件的更新之后进行以下操作" class="headerlink" title="在别人完成了文件的更新之后进行以下操作"></a>在别人完成了文件的更新之后进行以下操作</h3><p>1、在自己的github中找到fork的仓库也就yourname/xxx，把它删除掉，在setting中最下面有删除，输入名称点击删除即可<br>2、再去别人的github中fork想更新的仓库<br>3、回到本地的files里面运行git bash执行一下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><hr><h2 id="第二种进行的就是git上的指令操作了"><a href="#第二种进行的就是git上的指令操作了" class="headerlink" title="第二种进行的就是git上的指令操作了"></a>第二种进行的就是git上的指令操作了</h2><p>1、新建一个文件夹files<br>2、在新建文件夹中创建环境,运行git bash执行一下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><p>3、找到自己想更新的仓库点击clone or download（绿色的）<br>4、创建一个远程仓库，在文件夹中运行git bash执行以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add XXX https://xxxx</span><br></pre></td></tr></table></figure></p><p>add后面的XXX就是创建的远程仓库的名字（可以用git remote查看远程仓库有哪些）<br><a href="https://xxxx" target="_blank" rel="noopener">https://xxxx</a>  是clone的网址<br>5、把远程仓库的数据升级，在文件中运行git bash 执行以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote updata XXX</span><br></pre></td></tr></table></figure></p><p>6、从远程的仓库中把数据下载到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull XXX master</span><br></pre></td></tr></table></figure></p><p>在以后更新的时候只需在git bash中执行以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote update</span><br><span class="line">$ git pull XXX master</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;第一种git和github一起操作的&quot;&gt;&lt;a href=&quot;#第一种git和github一起操作的&quot; class=&quot;headerlink&quot; title=&quot;第一种git和github一起操作的&quot;&gt;&lt;/a&gt;第一种git和github一起操作的&lt;/h2&gt;&lt;h3 
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2018/05/17/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/05/17/闭包/</id>
    <published>2018-05-17T09:06:16.000Z</published>
    <updated>2018-05-21T14:12:38.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-变量的作用域"><a href="#1-变量的作用域" class="headerlink" title="1.变量的作用域"></a>1.变量的作用域</h2><p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量</p><p>函数内部可以直接读取全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var n= 999;</span><br><span class="line"></span><br><span class="line">function f1()&#123;</span><br><span class="line">  alert(n);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">f1();//  999</span><br></pre></td></tr></table></figure></p><p>但是函数外部无法读取函数内的局部变量</p><pre><code>function f1(){    var n =999;}alert(n);//error</code></pre><p>注意!   在函数内部声明变量的时候，一定要使用var命令，如果你不用的话，实际上就是声明了一个全局变量</p><pre><code>function f1(){     n=999;}f1();alert(n); //999&lt; !-- more --&gt;</code></pre><hr><h2 id="2-如何从外部读取局部变量"><a href="#2-如何从外部读取局部变量" class="headerlink" title="2.如何从外部读取局部变量"></a>2.如何从外部读取局部变量</h2><p>有的时候我们需要得到函数内部的局部变量，正常情况下是不能实现的，就需要我们在函数的内部再定义一个函数。</p><pre><code>function f1(){    var n=999;    function f2(){        alert(n);  //999    }}</code></pre><p>在上面可以看出，函数f2就包括在函数f1里面，这时f1内部的所有局部变量，对f2都是可见的。但是f2内的局部变量对f1是不可见的。这就是JS中的“链式作用域”，子对象会一级一级的向上寻找所有父对象的变量。所以父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的变量，那么把f2作为返回值，就可以在f1外部读取它内部的变量。</p><pre><code>function f1(){    var n  =999;    function f2(){        alert (n);    }}var result = f1();result(); //999</code></pre><hr><h2 id="3-闭包的概念"><a href="#3-闭包的概念" class="headerlink" title="3.闭包的概念"></a>3.闭包的概念</h2><p>上一节的代码中的f2函数，就是闭包</p><p>闭包比较简单的理解就是：能够读取其他函数内部变量的函数。</p><p>在JS中只有函数内部的子函数才能够读取局部变量，因此可以把闭包简单的理解成是“定义在一个函数内部的另一个函数”。闭包本质上就是函数内部和函数外部连接起来的一座桥梁。</p><hr><h2 id="4-闭包的用途"><a href="#4-闭包的用途" class="headerlink" title="4.闭包的用途"></a>4.闭包的用途</h2><p>闭包可以用在很多的地方。<br>一、可以读取函数内部的变量<br>二、让这些变量的值始终保持在内存中。</p><pre><code>function f1(){    var n=999;    nAdd=function(){n+=1}    function f2(){        alert(n);    }    return f2;}var result=f1();result(); // 999nAdd();result(); // 1000</code></pre><p>可以看出来在这段函数中，result就是闭包函数f2。它一共运行了两次，第一次的到的值是999，第二次是1000。按照正常情况来说，在f1调用之后它内部的局部变量应该被自动清除，但是第二次能得到1000，是因为f2被赋予给了一个全局变量result，f2始终存再内存中，而f2有依赖于f1，因此f1也始终在内存中，不会再调用结束后，被垃圾回收机制回收。</p><p>在f1中还有一个函数“nAdd=function(){n+=1}”值得注意，这是一个全局变量，前面没有var，nAdd的值也是一个匿名函数，这个匿名函数也是一个闭包，可以在函数的外部对内部的局部变量进行操作。</p><hr><h2 id="5-使用闭包的注意点"><a href="#5-使用闭包的注意点" class="headerlink" title="5.使用闭包的注意点"></a>5.使用闭包的注意点</h2><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><hr><h2 id="6-思考题"><a href="#6-思考题" class="headerlink" title="6.思考题"></a>6.思考题</h2><p>一、</p><pre><code>var name = &quot;The Window&quot;;var object = {    name : &quot;My Object&quot;；    getNameFunc : function(){        return function(){            return this.name;        };    }};alert(object.getNameFunc()());</code></pre><p>alert里面的值this.name,并且在全局作用下调用。this.name相当于指向的是window.name这个属性。答案是this。window</p><p>二、 </p><pre><code>var name = &quot;The Window&quot;;var object = {    name : &quot;My Object&quot;；    getNameFunc : function(){        var that = this;        return function(){            return that.name;        };    }};alert(object.getNameFunc()());</code></pre><p>这种情况下，getNameFunc在它的局部作用中声明了一个变量 that=this。alert在外部调用了这个函数，that.name又在它的父对象中找到了that的值。答案是my object</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-变量的作用域&quot;&gt;&lt;a href=&quot;#1-变量的作用域&quot; class=&quot;headerlink&quot; title=&quot;1.变量的作用域&quot;&gt;&lt;/a&gt;1.变量的作用域&lt;/h2&gt;&lt;p&gt;Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量&lt;/p&gt;
&lt;p&gt;函数内
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
