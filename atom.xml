<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦游小王</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-17T12:34:36.709Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梦游小王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2018/05/17/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/05/17/闭包/</id>
    <published>2018-05-17T09:06:16.000Z</published>
    <updated>2018-05-17T12:34:36.709Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="1-变量的作用域"><a href="#1-变量的作用域" class="headerlink" title="1.变量的作用域"></a>1.变量的作用域</h2><p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量</p><p>函数内部可以直接读取全局变量</p><pre><code>var n= 999;function f1(){  alert(n);}f1();//  999</code></pre><p>但是函数外部无法读取函数内的局部变量</p><pre><code>function f1(){    var n =999;}alert(n);//error</code></pre><p>注意!   在函数内部声明变量的时候，一定要使用var命令，如果你不用的话，实际上就是声明了一个全局变量</p><pre><code>function f1(){     n=999;}f1();alert(n); //999&lt; !-- more --&gt;</code></pre><hr><h2 id="2-如何从外部读取局部变量"><a href="#2-如何从外部读取局部变量" class="headerlink" title="2.如何从外部读取局部变量"></a>2.如何从外部读取局部变量</h2><p>有的时候我们需要得到函数内部的局部变量，正常情况下是不能实现的，就需要我们在函数的内部再定义一个函数。</p><pre><code>function f1(){    var n=999;    function f2(){        alert(n);  //999    }}</code></pre><p>在上面可以看出，函数f2就包括在函数f1里面，这时f1内部的所有局部变量，对f2都是可见的。但是f2内的局部变量对f1是不可见的。这就是JS中的“链式作用域”，子对象会一级一级的向上寻找所有父对象的变量。所以父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的变量，那么把f2作为返回值，就可以在f1外部读取它内部的变量。</p><pre><code>function f1(){    var n  =999;    function f2(){        alert (n);    }}var result = f1();result(); //999</code></pre><hr><h2 id="3-闭包的概念"><a href="#3-闭包的概念" class="headerlink" title="3.闭包的概念"></a>3.闭包的概念</h2><p>上一节的代码中的f2函数，就是闭包</p><p>闭包比较简单的理解就是：能够读取其他函数内部变量的函数。</p><p>在JS中只有函数内部的子函数才能够读取局部变量，因此可以把闭包简单的理解成是“定义在一个函数内部的另一个函数”。闭包本质上就是函数内部和函数外部连接起来的一座桥梁。</p><hr><h2 id="4-闭包的用途"><a href="#4-闭包的用途" class="headerlink" title="4.闭包的用途"></a>4.闭包的用途</h2><p>闭包可以用在很多的地方。<br>一、可以读取函数内部的变量<br>二、让这些变量的值始终保持在内存中。</p><pre><code>function f1(){    var n=999;    nAdd=function(){n+=1}    function f2(){        alert(n);    }    return f2;}var result=f1();result(); // 999nAdd();result(); // 1000</code></pre><p>可以看出来在这段函数中，result就是闭包函数f2。它一共运行了两次，第一次的到的值是999，第二次是1000。按照正常情况来说，在f1调用之后它内部的局部变量应该被自动清除，但是第二次能得到1000，是因为f2被赋予给了一个全局变量result，f2始终存再内存中，而f2有依赖于f1，因此f1也始终在内存中，不会再调用结束后，被垃圾回收机制回收。</p><p>在f1中还有一个函数“nAdd=function(){n+=1}”值得注意，这是一个全局变量，前面没有var，nAdd的值也是一个匿名函数，这个匿名函数也是一个闭包，可以在函数的外部对内部的局部变量进行操作。</p><hr><h2 id="5-使用闭包的注意点"><a href="#5-使用闭包的注意点" class="headerlink" title="5.使用闭包的注意点"></a>5.使用闭包的注意点</h2><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><hr><h2 id="6-思考题"><a href="#6-思考题" class="headerlink" title="6.思考题"></a>6.思考题</h2><p>一、</p><pre><code>var name = &quot;The Window&quot;;var object = {    name : &quot;My Object&quot;；    getNameFunc : function(){        return function(){            return this.name;        };    }};alert(object.getNameFunc()());</code></pre><p>alert里面的值this.name,并且在全局作用下调用。this.name相当于指向的是window.name这个属性。答案是this。window</p><p>二、 </p><pre><code>var name = &quot;The Window&quot;;var object = {    name : &quot;My Object&quot;；    getNameFunc : function(){        var that = this;        return function(){            return that.name;        };    }};alert(object.getNameFunc()());</code></pre><p>这种情况下，getNameFunc在它的局部作用中声明了一个变量 that=this。alert在外部调用了这个函数，that.name又在它的父对象中找到了that的值。答案是my object</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;1-变量的作用域&quot;&gt;&lt;a href=&quot;#1-变量的作用域&quot; class=&quot;headerlink&quot; title=&quot;1.变量的作用域&quot;&gt;&lt;/a&gt;1.变量的作用域&lt;/h2&gt;&lt;p&gt;Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
