<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[解构赋值]]></title>
    <url>%2F2018%2F05%2F24%2F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[数组的解构赋值匹配模式只要左右两边的模式相同，左边的变量就会被赋予对应的值。123456789let [a,b,c]=[1,2,3]let [foo, [[bar], baz]] = [1, [[2], 3]];let [x, , y] = [1, 2, 3];let [head, ...tail] = [1, 2, 3, 4];let [x, y, ...z] = [&apos;a&apos;] 还有另外一种形式:先看右边的，如果右边没有，看等号 123let [x=y, y=5] = [&apos;a&apos;,7];let [x=5, y=5] = [,7] 右边内容必须是严格的===判断例如undefiend就是没有，null就是有默认值生效的条件是，对象的属性值严格等于undefined。12345let [x = 1] = [undefined];x // 1let [x = 1] = [null];x // null 嵌套模式1let [a, [b], d] = [1, [2, 3], 4]; 对象的解构赋值对象解构赋值与数组解构赋值的不同因为数组的解构赋值是有顺序的，但是对象是无序的，所以对象在使用解构赋值的时候变量必须要跟属性同名才可以。 如果变量名和属性名不同，那就可以用以下的方式来写12let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;baz // &quot;aaa&quot; 嵌套模式12345678let obj = &#123; p: [ &apos;Hello&apos;, &#123; y: &apos;World&apos; &#125; ]&#125;;let &#123; p, p: [x, &#123; y &#125;] &#125; = obj; 如果在之前有变量名了，在解构的过程中就可以不用写let了但是需要加上（） 12let x;(&#123;x&#125;=&#123;x:1&#125;); {x}是一个代码块，会发生语法错误，大括号不在行首就可以避免{x}被解析成代码块 默认值生效的条件是，对象的属性值严格等于undefined。 12345let &#123;x:y=3&#125;=&#123;x:undefined&#125;let &#123;x:y=3&#125;=&#123;&#125;let &#123;x:y=3&#125;=&#123;x:null&#125; 实际的应用1let &#123;left，right，top：Top&#125;=getcompletedStyle（div） 右边的getcompletedStyle（div）上面有很多属性，可以用解构赋值的方法一次性的获取想要的所有属性值。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>ES6 解构赋值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的记录promise]]></title>
    <url>%2F2018%2F05%2F23%2F%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%B0%E5%BD%95promise%2F</url>
    <content type="text"><![CDATA[&emsp;在学习AJAX的过程中我有很多的不能够理解的地方，例如同步和异步，虽然能有简单的例子给我参考，但是我还是有点模糊，之后又遇到了promise这个ES6中新的属性，我就更加的晕了。但是学习的过程就是这样的，不奢望自己能够一蹴而就，只要自己能够坚持住就满足了。晚上回来之后就开始琢磨promise到底是个什么鬼东西，看了几篇文章，也看了阮一峰的ES6入门，算是对它的方法有了一点点的了解，现在只能说是在这里把它记录下来，方便自己以后更深入的学习。 promise的三种状态&emsp;在看得时候不奢求理解只是想记下来它的三个状态：pending（等待态）、fufiled（成功态）、rejected（失败态） promise解决的两个问题&emsp;1、回调地狱的问题，解决代码难以维护，第一个函数的输出是第二个函数的输入。&emsp;2、支持多个并发的请示，并获得并发的请求数据。 promise接收的参数&emsp;promise接收一个参数这是阮大神说的，我的理解就是promise只接收一种参数，就是函数，但是要传入两个参数分别是：&emsp;resolve：异步操作执行成功后的回调函数。&emsp;reject：异步操作执行失败后的回调函数。&emsp;这里引用了阮大神的实例123456789const promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); then的链式操作&emsp;then这个链式操作中有两个参数一个是resolve的回调另一个就是reject的回调。当p对象的状态是resolved的时候后调用，另一个是p对象的状态是reject的时候调用。第二个参数可以不写。这两个函数可以接受p传出的值作为参数。 catch的操作&emsp;catch是指定reject的回调，在then的第一个参数resolve中出现异常并不会卡死，才继续带catch中。 all的用法&emsp;all的用法简单来说就是谁最后走完就以谁为准执行回调。&emsp;all接收一个数组，数组中都是promise的实例。 race的用法&emsp;race的用法就是谁跑的快就以谁为准执行回调。&emsp;race也是接收一个数组，数组中都是promise的实例。 &emsp;以上就是我自己记录的一些关于promise的方法，由于理解不深刻没办法用实例更清楚的说明，但是弄明白之后会在以后的bolg中以实例说明的。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>ES6 promise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git上传代码的指令]]></title>
    <url>%2F2018%2F05%2F22%2Fgit%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[首先要理解git的工作原理 &emsp;git是分布式的工作原理，自己的电脑就是一个服务器，每次写的代码都可以保存到自己的电脑中，并有相对应的版本号，即使文件不小心被删除了，也可以根据版本号进行恢复。 &emsp;在git工作的时候其中有三个分区：分别是工作区、暂存区、版本区。 上传的指令 &emsp;在我们写代码的时候就是在工作区进行的操作，每次写入的代码都会保存在工作区里面，但是在不小心删除工作区的文件的时候，文件就会被删除了，为了恢复被删除的文件就需要先把文件上传，分为以下两个步骤： &emsp;1、把文件由工作区上传到暂存区分为两种方法 &emsp;第一种：上传一个文件到暂存区1$ git add 文件的名字 &emsp;第二种：上传全部的工作区文件到暂存区1$ git add . &emsp;2、把文件上传到版本区也是有两种方法 &emsp;第一种是把暂存区所有的文件都上传到版本区1$ git commit -m &quot;注释&quot; &emsp;第二种是从工作区上传到版本区，但是这种方法的前提是要上传的文件被commit过的才行，有局限性1$ git commit -a -m &quot;注释&quot; git三个分区内文件内容的比较指令&emsp;1、工作区和暂存区的比较指令1$ git diff &emsp;2、暂存区和版本区的比较指令1$ git diff --cached &emsp;3、工作区和版本区的比较指令1$ git diff master &emsp;对于以上三个指令，在输入指令后会在git bash上显示两个想比较的分区中同一个文件的改动之处]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git同步数据]]></title>
    <url>%2F2018%2F05%2F21%2Fgit%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[第一种git和github一起操作的第一次的操作1、新建一个文件夹files2、在github上找到想要下载下来的文件点击右上角的fork3、点击clone or download（绿色的） 复制下网址4、打开文件夹flies，在flies里面运行git bash输入以下指令1$ git clone https://XXXXXXXXXXXXX 输入上面指令后再输入以下指令就可以把文件下载到本地了1$ git pull 在别人完成了文件的更新之后进行以下操作1、在自己的github中找到fork的仓库也就yourname/xxx，把它删除掉，在setting中最下面有删除，输入名称点击删除即可2、再去别人的github中fork想更新的仓库3、回到本地的files里面运行git bash执行一下指令1$ git pull 第二种进行的就是git上的指令操作了1、新建一个文件夹files2、在新建文件夹中创建环境,运行git bash执行一下指令1$ git init 3、找到自己想更新的仓库点击clone or download（绿色的）4、创建一个远程仓库，在文件夹中运行git bash执行以下指令1$ git remote add XXX https://xxxx add后面的XXX就是创建的远程仓库的名字（可以用git remote查看远程仓库有哪些）https://xxxx 是clone的网址5、把远程仓库的数据升级，在文件中运行git bash 执行以下指令1$ git remote updata XXX 6、从远程的仓库中把数据下载到本地1$ git pull XXX master 在以后更新的时候只需在git bash中执行以下指令12$ git remote update$ git pull XXX master]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2F2018%2F05%2F17%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[1.变量的作用域Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量 函数内部可以直接读取全局变量1234567var n= 999;function f1()&#123; alert(n);&#125; f1();// 999 但是函数外部无法读取函数内的局部变量 function f1(){ var n =999; } alert(n);//error 注意! 在函数内部声明变量的时候，一定要使用var命令，如果你不用的话，实际上就是声明了一个全局变量 function f1(){ n=999; } f1(); alert(n); //999 &lt; !-- more --&gt; 2.如何从外部读取局部变量有的时候我们需要得到函数内部的局部变量，正常情况下是不能实现的，就需要我们在函数的内部再定义一个函数。 function f1(){ var n=999; function f2(){ alert(n); //999 } } 在上面可以看出，函数f2就包括在函数f1里面，这时f1内部的所有局部变量，对f2都是可见的。但是f2内的局部变量对f1是不可见的。这就是JS中的“链式作用域”，子对象会一级一级的向上寻找所有父对象的变量。所以父对象的所有变量，对子对象都是可见的，反之则不成立。 既然f2可以读取f1中的变量，那么把f2作为返回值，就可以在f1外部读取它内部的变量。 function f1(){ var n =999; function f2(){ alert (n); } } var result = f1(); result(); //999 3.闭包的概念上一节的代码中的f2函数，就是闭包 闭包比较简单的理解就是：能够读取其他函数内部变量的函数。 在JS中只有函数内部的子函数才能够读取局部变量，因此可以把闭包简单的理解成是“定义在一个函数内部的另一个函数”。闭包本质上就是函数内部和函数外部连接起来的一座桥梁。 4.闭包的用途闭包可以用在很多的地方。一、可以读取函数内部的变量二、让这些变量的值始终保持在内存中。 function f1(){ var n=999; nAdd=function(){n+=1} function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999 nAdd(); result(); // 1000 可以看出来在这段函数中，result就是闭包函数f2。它一共运行了两次，第一次的到的值是999，第二次是1000。按照正常情况来说，在f1调用之后它内部的局部变量应该被自动清除，但是第二次能得到1000，是因为f2被赋予给了一个全局变量result，f2始终存再内存中，而f2有依赖于f1，因此f1也始终在内存中，不会再调用结束后，被垃圾回收机制回收。 在f1中还有一个函数“nAdd=function(){n+=1}”值得注意，这是一个全局变量，前面没有var，nAdd的值也是一个匿名函数，这个匿名函数也是一个闭包，可以在函数的外部对内部的局部变量进行操作。 5.使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 6.思考题一、 var name = &quot;The Window&quot;; var object = { name : &quot;My Object&quot;； getNameFunc : function(){ return function(){ return this.name; }; } }; alert(object.getNameFunc()()); alert里面的值this.name,并且在全局作用下调用。this.name相当于指向的是window.name这个属性。答案是this。window 二、 var name = &quot;The Window&quot;; var object = { name : &quot;My Object&quot;； getNameFunc : function(){ var that = this; return function(){ return that.name; }; } }; alert(object.getNameFunc()()); 这种情况下，getNameFunc在它的局部作用中声明了一个变量 that=this。alert在外部调用了这个函数，that.name又在它的父对象中找到了that的值。答案是my object]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
