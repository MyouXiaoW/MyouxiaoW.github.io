<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[react生命周期]]></title>
    <url>%2F2018%2F06%2F09%2Freact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[React 生命周期我对react生命周期的理解就是在react组件的一些操作原理。那么react的生命周期里面又有哪些呢？ 1、组件初始化 componentWillMount =&gt; render =&gt; componentDidMount 触发的原因就是组件的初始化。 2、组件更新props componentWillReceiveprops =&gt; shouldcomponentUpdate =&gt; componentWillUpdate =&gt; componentDidUpdate 触发的原因就是props发生了更改 3、组件的state change shouldcomponentUpdate =&gt; componentWillUpdate =&gt; componentDidUpdate 触发的原因就是this.setstate()使state发生了更改 4、组件的卸载或者是销毁 componentWillUnmount 触发的原因就是组件的卸载或者是销毁]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Router学习]]></title>
    <url>%2F2018%2F06%2F07%2FRouter%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Router学习记录在react中使用Router的时候先要在npm中下载这个包并且在js中引用才可以使用它。npm i react-router-dom –save首先要在js文件中引用它1import&#123;BrowserRouter as Router&#125; from &quot;react-router-dom&quot; 在index.js中写的形式,必须用标签把组件包起来12345ReactDom.render( &lt;Router&gt; &lt;App /&gt; &lt;/Router&gt;) 在index.js引用的组件中需要引用在渲染组件的时候来写出path（路径）,后面可以写component或者是render 也可以是chidren123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;Route path:&quot;/&quot; component=&#123;App&#125;/&gt;&lt;Route path:&quot;/&quot; render=&#123;()=&gt;&#123; return &lt;App /&gt;//这必须是return后面加上组件&#125;&#125;/&gt;&lt;Route path:&quot;/&quot; children =&#123;App&#125;/&gt;//这里是强制性的，不管path是什么，都强制跳转到children里面的组件//path上面可以加上id，在render里面会传入一个props里面有match、location、history等在Route中如果写了component=&#123;组件&#125;，那么如果要获取URL信息可以去组件中的render函数中的this.props中查找&lt;Route path=&quot;/about/:id&quot; render=&#123;(&#123;match:&#123;params&#125;&#125;)=&gt;&#123; switch(params.id)&#123; case &apos;a&apos;: return &lt;About1 /&gt; break; case &apos;b&apos;: return &lt;About2 /&gt; break; case &apos;c&apos;: return &lt;About3 /&gt; break; default: return &lt;About1 /&gt; break; &#125; &#125;&#125;/&gt; 在path前面还可以添加exact 和strictexact：可以在one后面加上一个/也能打开页面/one/ /one /one/two true no /one /one/two false yes strict：在后面几个也能打开 /one/ /one no /one/ /one/ yes /one/ /one/two yes 在strict和exact都有的情况下，连一个/都不能加。link 组件是一个点击后会跳转的到相应的路径的组件&lt;link to=&quot;/aa/&quot;&gt;&lt;link /&gt;重定向跳转组件to后面是想要重新跳转的路径&lt;Redirect to=&quot;/aa/&quot; /&gt;]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React的学习记录]]></title>
    <url>%2F2018%2F06%2F05%2FReact%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[React的学习记录如何开始一个react项目呢？在文件夹中打开cmd操作指令输入一下指令12npm install -g create-react-appcreate-react-app my-app 之后输入以下指令12cd my-appnpm start 输入完以上指令后会自动跳转到localhost：3000在使用react的时候要属性jsx语法写法大致如下： 这两项是为了引入react文件12import React from &apos;react&apos;;import ReactDom from &quot;react-dom&quot;; 这两项是引入了App组件和index的css文件12import App from &quot;./js/app/app&quot;import &quot;./css/index.css&quot; 这句话是启动了自动刷新页面功能1234if(module.hot)&#123; module.hot.accept();&#125; 这句话是渲染页面，组件使用的是单标签来使用的,在jsx语法中单标签中必须要用/来结尾而且首字母必须是大写的，render函数的第一个参数是组件，第二个参数是要渲染的位置，第三个参数是渲染之后的一个回调函数。123456ReactDom.render( &lt;App /&gt;, document.getElementById(&quot;root&quot;)， cb())]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今日学习]]></title>
    <url>%2F2018%2F05%2F31%2F%E4%BB%8A%E6%97%A5%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[今日的一点小小的总结吧ES6里面的面向对象的继承在class里面继承之后，子类里面的constructor的this的指向将是父类，必须要在constructor里面加上super()函数才可以，如果传入的参数没有变化的话可以直接在constructor里面直接传入…args参数，并在在constructor里面的super()中传入…args。123456789101112class person&#123; constructor(name)&#123; this.name = name; &#125; &#125; class child extends person&#123; constructor(...arg)&#123; super(...arg); &#125; &#125; let c= new child(&quot;xiaowang&quot;) ; console.log(c.name)//xiaowang Object.defineproperty()object.defineproperty()最后一个参数是一个对象，对象可以放get(),set()两个方法。get()方法会有一个返回值被作为属性值，默认为undefiend。set()方法将接受唯一参数，并将该参数的新值分配给该属性，默认为 undefined。1234567891011121314151617181920212223function Archiver() &#123; var temperature = null; var archive = []; Object.defineProperty(this, &apos;temperature&apos;, &#123; get: function() &#123; console.log(&apos;get!&apos;); return temperature; &#125;, set: function(value) &#123; temperature = value; archive.push(&#123; val: temperature &#125;); &#125; &#125;); this.getArchive = function() &#123; return archive; &#125;;&#125;var arc = new Archiver();arc.temperature; // &apos;get!&apos;arc.temperature = 11;arc.temperature = 13;arc.getArchive(); // [&#123; val: 11 &#125;, &#123; val: 13 &#125;] 12345678910111213141516171819202122var pattern = &#123; get: function () &#123; return &apos;I alway return this string,whatever you have assigned&apos;; &#125;, set: function () &#123; this.myname = &apos;this is my name string&apos;; &#125;&#125;;function TestDefineSetAndGet() &#123; Object.defineProperty(this, &apos;myproperty&apos;, pattern);&#125;var instance = new TestDefineSetAndGet();instance.myproperty = &apos;test&apos;;// &apos;I alway return this string,whatever you have assigned&apos;console.log(instance.myproperty);// &apos;this is my name string&apos;console.log(instance.myname); 箭头函数箭头函数的this指向，总是会指向上一级。箭头函数的this指向不会被call（），bind（），apply（）改变。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[面向对象的继承和ES6的面向对象扩展]]></title>
    <url>%2F2018%2F05%2F30%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%A7%E6%89%BF%E5%92%8CES6%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[面向对象的继承和ES6的面向对象扩展面向对象的继承要实现面向对象的继承瘦小要实现属性继承也就是类式继承：把父类放到子类下面。然后面向对象的继承分为两类，一个是拷贝继承，另一种是原型继承，这都是根据构造函数和实例化对象的特点来完成的。拷贝继承：遍历父类的原型的方法，并赋值给子类的原型。原型继承：创建一个第三方构造函数让其原型等于父类的原型实例化对象这个构造函数实例化对象等于子类原型。1234567891011121314151617181920212223242526272829function Parent (name)&#123; this.name=name; &#125;； Parent.prototype.say = function()&#123; console.log(&quot;哈喽&quot;) &#125;；let p = new Parent；//类式继承,利用函数的call方法改变this的指向，完成类式继承function child(name)&#123; Parent.call(this,name) &#125;//拷贝继承let c=new child；//用 for in 实现浅拷贝,但是也会改变c的constructor的指向，所以需要手动的改回来for(let attr in Parent.prototype)&#123; child.prototype[attr]=Parent.prototype[attr]; &#125;;c.constructor=child;//也可以用assign进行浅拷贝,也要注意实例对象的constructor指向问题Object（child.prototype，Parent.prototype）；//也可以用...扩展符，但是不需要改constructor了//下面是属性继承，首先创建一个新的构造函数,通过这个新的实例化对象找到父级的prototype。function N()&#123;&#125;let n = new N;N.prototype = Parent.prototype;c.prototype = n;//还有一种方式c.prototype = p; ES6的面向对象的扩展如下123456789101112131415161718192021222324function person()&#123;&#125;===class person&#123;&#125;class Person &#123; constructor(name,age)&#123; //如果是继承的情况下，在此处加上super()才能改变this的指向 this.name = name; this.age = age; // console.log(arguments); &#125; static say()&#123; //静态方法 alert(this.name); &#125; say()&#123; //动态方法 alert(this.name); &#125; runding()&#123; //动态方法 alert(this.name+&apos;会跑!&apos;); &#125; &#125; 动态方法例如1arr.push(4) 这种可以在实例对象上可以调用的方法 静态方法例如1Array.from() 这种是构造函数上可以调用的方法]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象的实际用法]]></title>
    <url>%2F2018%2F05%2F29%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E9%99%85%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[面向对象的实际用法在学习了面向对象之后总是不知道该怎么用，庸才在什么地方，其实面向对象可以和面向过程想对比较使用，就会发现面向对象的思想会更加的方便。这就好比工人和车床一样，面向过程我们只能根据工人来不断的换车床，调整车床的功能。面向对象使工人和车床分离开搭配，这样搭配工作起来就会更加的简单。 选项卡1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;style&gt; .active&#123; background: yellow; &#125; div&#123; width:100px; height: 100px; border: 1px solid #000; display: none; &#125; .show&#123; display: block; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button class=&quot;active&quot;&gt;选项一&lt;/button&gt; &lt;button&gt;选项二&lt;/button&gt; &lt;button&gt;选项三&lt;/button&gt; &lt;div class=&quot;show&quot;&gt;1111111&lt;/div&gt; &lt;div&gt;222222222&lt;/div&gt; &lt;div&gt;3333333333&lt;/div&gt;&lt;/body&gt;&lt;script&gt; //首先写出构造函数 function Tab ()&#123; this.btns = document.getElementsByTagName(&quot;button&quot;); this.divs=document.getElementsByTagName(&quot;div&quot;); this.event(&quot;onclick&quot;);//在构造函数中调用 &#125; //Tab的原型添加一个函数，这个函数里面有事件 Tab.prototype.event =function(eventName)&#123; let that =this; for(i=0;i&lt;this.btns.length;i++)&#123; this.btns[i][eventName]=function()&#123; for(j=0;j&lt;that.btns.length;j++)&#123; that.btns[j].className=that.divs.className=&quot;&quot;; &#125; this.className=&quot;active&quot;; that.divs.className=&quot;show&quot;; &#125; &#125; &#125; let p = new Tab; &lt;/script&gt;&lt;/html&gt; 拖拽事件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #box&#123; width:100px; height: 100px; background: red; position:absolute; left:0; top:0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; //先写出一个构造函数 function Drag(id)&#123; this.box =document.getElementById(id); this.disX=0; this.disY=0; &#125; Drag.prototype.init = function()&#123; this.mousedown() &#125; //Drag的原型链函数mousedown里面包括着点击事件 Drag.prototype.mousedown =function()&#123; let that = this; this.box.addEventListener(&quot;mousedown&quot;,function(ev)&#123; that.down(ev); function move(ev)&#123; that.move(ev); &#125; function up(ev)&#123; that.up(ev,move,up); &#125; //事件监听绑定原型上的函数 document.addEventListener(&quot;mousemove&quot;,move); document.addEventListener(&quot;mouseup&quot;,up); &#125;) &#125; Drag.prototype.down=function(ev)&#123; this.disX=ev.pageX-this.box.offsetLeft; this.disY=ev.pageY-this.box.offsetTop; &#125; Drag.prototype.move = function(ev)&#123; this.box.style.left = ev.pageX - this.disX + &apos;px&apos;; this.box.style.top = ev.pageY - this.disY + &apos;px&apos;; &#125; Drag.prototype.up=function(ev,move,up)&#123; document.removeEventListener(&quot;mousemove&quot;,move); document.removeEventListener(&quot;mouseup&quot;,up); &#125; let p=new Drag(&quot;box&quot;); p.init();&lt;/script&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实例化对象的属性或者方法是谁？]]></title>
    <url>%2F2018%2F05%2F28%2F%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%80%85%E6%96%B9%E6%B3%95%E6%98%AF%E8%B0%81%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[面向对象中如何判实例化对象的属性或者方法是谁？&emsp;在学习如何判断实例化对象的属性或者方法是谁的之前我们要先知道一下几点：1、构造函数的原型（prototype）===实例对象的proto（这里是三等的全等，而且在浏览器中打印的proto是假的不要相信）2、构造函数的原型的方法或者属性只能给它的实例对象用3、prototype这个值是一个对象4、Function是Function构造出来的5、Object也是Function构造出来的6、函数fn既是构造函数也是实例化的对象&emsp;根据以上的几点可以找到实例化对象的属性和方法到底是谁了。 ##一些实例## 根据下面的代码可以练习找到实例对象的方法或者属性1234567891011121314151617181920212223242526function Person(name,age)&#123; this.name = name; this.age = age; &#125; Person.prototype.say = function()&#123; alert(1); &#125; Function.prototype.say = function()&#123; alert(3); &#125; Object.prototype.say = function()&#123; alert(4); &#125; Function.say = function()&#123; alert(5); &#125; Person.say = function()&#123; alert(2); &#125; let p = new Person(); p.say(); Person.say(); Function.say(); Object.say(); 总结出来的一些技巧12345678910111213141516171819p.say 1、p.say 2、Person.prototype.say 3、Object.prototype.sayPerson.say 1、Person.say 2、Person.__proto__ -&gt; Function.prototype 3、Object.prototype.sayFunction.say 1、Function.say 2、Function.__proto__ -&gt; Function.prototype 3、Object.prototype.sayObject.say 1、Object.say 2、Object.__proto__ -&gt; Function.prototype 3、Object.prototype.say]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[async的学习笔记]]></title>
    <url>%2F2018%2F05%2F27%2Fasync%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[async函数是什么？&emsp;async函数就是让异步函数看起来更像是同步函数。 &emsp;在async函数中会有一个关键字await，await的意思就是在它后面的表达式需要等待执行的结果。 &emsp;await的后面是promise对象或者也可以是简单的数据类型（被认为是resolve的promise）。 &emsp;如果await后面的promise是rejected的状态的话，整个async就会被停止，并且抛出错误，可以用try……catch拿到错误。 123456789async function testAwait () &#123; try &#123; await func1() await func2() await func3() &#125; catch (error) &#123; console.log(error) &#125;&#125; &emsp;async的返回值是promise对象或者也可以是简单的数据类型（被认为是resolve的promise）。 &emsp;在async后面可以通过then（）回调函数，async的return的值就作为参数传入then（）中。 12345678910async function test () &#123; return &apos;this is a test async function&apos;&#125;test().then( resolveArg =&gt; console.log(resolveArg))// 输出结果// this is a test async function async函数内部是怎样的？await的继发执行继发执行就是所有await后面的函数依次执行12345678910111213141516171819let num = 0function timeout(ms) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(function()&#123; resolve(num) console.log(++num) &#125;, ms, &apos;done&apos;); &#125;);&#125;async function fn ()&#123; await timeout(1000) await timeout(2000) await timeout(3000) return &quot;done1&quot;&#125;fn().then((res)=&gt;&#123; console.log(res)&#125;)//会在6秒后返回 如果async里面中有没有带await的函数，那么就是和这个函数后面的函数进行同步操作。 123456789async function fn ()&#123; await timeout(1000) timeout(1000) await timeout(1000) return &quot;done1&quot;&#125;fn().then((res)=&gt;&#123; console.log(res)&#125;)//在延时2秒后两个函数会同时出来。 await的并发执行并发执行就是所有的一起执行，但是根据Promise最后得出结果的时间给出返回值。1234567async function fn ()&#123; let [res1,res2] = await Promise.all([timeout(3000,1),timeout(1000,2)]) return [res1,res2]&#125;fn().then((res)=&gt;&#123; console.log(res)&#125;)//在1秒时后打印2，3秒时打印1，和[1,2] await可以截断for循环1234567891011121314151617181920function fn (i)&#123; return new Promise((res,rej)=&gt;&#123; setTimeout(function()&#123; res(i) console.log(i) &#125;,1000) &#125;) &#125;async function fn1()&#123; for(var i=0;i&lt;10;i++)&#123; await fn(i) &#125; return fn(i)&#125;fn1().then (res=&gt;&#123; console.log(res)&#125;)//打印出1,2,3,4，5,6,7,8,9,10,10，最后的一个是是19行打印出来的。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>ES7 async</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解构赋值]]></title>
    <url>%2F2018%2F05%2F24%2F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[数组的解构赋值匹配模式只要左右两边的模式相同，左边的变量就会被赋予对应的值。123456789let [a,b,c]=[1,2,3]let [foo, [[bar], baz]] = [1, [[2], 3]];let [x, , y] = [1, 2, 3];let [head, ...tail] = [1, 2, 3, 4];let [x, y, ...z] = [&apos;a&apos;] 还有另外一种形式:先看右边的，如果右边没有，看等号 123let [x=y, y=5] = [&apos;a&apos;,7];let [x=5, y=5] = [,7] 右边内容必须是严格的===判断例如undefiend就是没有，null就是有默认值生效的条件是，对象的属性值严格等于undefined。12345let [x = 1] = [undefined];x // 1let [x = 1] = [null];x // null 嵌套模式1let [a, [b], d] = [1, [2, 3], 4]; 对象的解构赋值对象解构赋值与数组解构赋值的不同因为数组的解构赋值是有顺序的，但是对象是无序的，所以对象在使用解构赋值的时候变量必须要跟属性同名才可以。 如果变量名和属性名不同，那就可以用以下的方式来写12let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;baz // &quot;aaa&quot; 嵌套模式12345678let obj = &#123; p: [ &apos;Hello&apos;, &#123; y: &apos;World&apos; &#125; ]&#125;;let &#123; p, p: [x, &#123; y &#125;] &#125; = obj; 如果在之前有变量名了，在解构的过程中就可以不用写let了但是需要加上（） 12let x;(&#123;x&#125;=&#123;x:1&#125;); {x}是一个代码块，会发生语法错误，大括号不在行首就可以避免{x}被解析成代码块 默认值生效的条件是，对象的属性值严格等于undefined。 12345let &#123;x:y=3&#125;=&#123;x:undefined&#125;let &#123;x:y=3&#125;=&#123;&#125;let &#123;x:y=3&#125;=&#123;x:null&#125; 实际的应用1let &#123;left，right，top：Top&#125;=getcompletedStyle（div） 右边的getcompletedStyle（div）上面有很多属性，可以用解构赋值的方法一次性的获取想要的所有属性值。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>ES6 解构赋值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的记录promise]]></title>
    <url>%2F2018%2F05%2F23%2F%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%B0%E5%BD%95promise%2F</url>
    <content type="text"><![CDATA[&emsp;在学习AJAX的过程中我有很多的不能够理解的地方，例如同步和异步，虽然能有简单的例子给我参考，但是我还是有点模糊，之后又遇到了promise这个ES6中新的属性，我就更加的晕了。但是学习的过程就是这样的，不奢望自己能够一蹴而就，只要自己能够坚持住就满足了。晚上回来之后就开始琢磨promise到底是个什么鬼东西，看了几篇文章，也看了阮一峰的ES6入门，算是对它的方法有了一点点的了解，现在只能说是在这里把它记录下来，方便自己以后更深入的学习。 promise的三种状态&emsp;在看得时候不奢求理解只是想记下来它的三个状态：pending（等待态）、fufiled（成功态）、rejected（失败态） promise解决的两个问题&emsp;1、回调地狱的问题，解决代码难以维护，第一个函数的输出是第二个函数的输入。&emsp;2、支持多个并发的请示，并获得并发的请求数据。 promise接收的参数&emsp;promise接收一个参数这是阮大神说的，我的理解就是promise只接收一种参数，就是函数，但是要传入两个参数分别是：&emsp;resolve：异步操作执行成功后的回调函数。&emsp;reject：异步操作执行失败后的回调函数。&emsp;这里引用了阮大神的实例123456789const promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); then的链式操作&emsp;then这个链式操作中有两个参数一个是resolve的回调另一个就是reject的回调。当p对象的状态是resolved的时候后调用，另一个是p对象的状态是reject的时候调用。第二个参数可以不写。这两个函数可以接受p传出的值作为参数。 catch的操作&emsp;catch是指定reject的回调，在then的第一个参数resolve中出现异常并不会卡死，才继续带catch中。 all的用法&emsp;all的用法简单来说就是谁最后走完就以谁为准执行回调。&emsp;all接收一个数组，数组中都是promise的实例。 race的用法&emsp;race的用法就是谁跑的快就以谁为准执行回调。&emsp;race也是接收一个数组，数组中都是promise的实例。 &emsp;以上就是我自己记录的一些关于promise的方法，由于理解不深刻没办法用实例更清楚的说明，但是弄明白之后会在以后的bolg中以实例说明的。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>ES6 promise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git上传代码的指令]]></title>
    <url>%2F2018%2F05%2F22%2Fgit%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[首先要理解git的工作原理 &emsp;git是分布式的工作原理，自己的电脑就是一个服务器，每次写的代码都可以保存到自己的电脑中，并有相对应的版本号，即使文件不小心被删除了，也可以根据版本号进行恢复。 &emsp;在git工作的时候其中有三个分区：分别是工作区、暂存区、版本区。 上传的指令 &emsp;在我们写代码的时候就是在工作区进行的操作，每次写入的代码都会保存在工作区里面，但是在不小心删除工作区的文件的时候，文件就会被删除了，为了恢复被删除的文件就需要先把文件上传，分为以下两个步骤： &emsp;1、把文件由工作区上传到暂存区分为两种方法 &emsp;第一种：上传一个文件到暂存区1$ git add 文件的名字 &emsp;第二种：上传全部的工作区文件到暂存区1$ git add . &emsp;2、把文件上传到版本区也是有两种方法 &emsp;第一种是把暂存区所有的文件都上传到版本区1$ git commit -m &quot;注释&quot; &emsp;第二种是从工作区上传到版本区，但是这种方法的前提是要上传的文件被commit过的才行，有局限性1$ git commit -a -m &quot;注释&quot; git三个分区内文件内容的比较指令&emsp;1、工作区和暂存区的比较指令1$ git diff &emsp;2、暂存区和版本区的比较指令1$ git diff --cached &emsp;3、工作区和版本区的比较指令1$ git diff master &emsp;对于以上三个指令，在输入指令后会在git bash上显示两个想比较的分区中同一个文件的改动之处]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git同步数据]]></title>
    <url>%2F2018%2F05%2F21%2Fgit%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[第一种git和github一起操作的第一次的操作1、新建一个文件夹files2、在github上找到想要下载下来的文件点击右上角的fork3、点击clone or download（绿色的） 复制下网址4、打开文件夹flies，在flies里面运行git bash输入以下指令1$ git clone https://XXXXXXXXXXXXX 输入上面指令后再输入以下指令就可以把文件下载到本地了1$ git pull 在别人完成了文件的更新之后进行以下操作1、在自己的github中找到fork的仓库也就yourname/xxx，把它删除掉，在setting中最下面有删除，输入名称点击删除即可2、再去别人的github中fork想更新的仓库3、回到本地的files里面运行git bash执行一下指令1$ git pull 第二种进行的就是git上的指令操作了1、新建一个文件夹files2、在新建文件夹中创建环境,运行git bash执行一下指令1$ git init 3、找到自己想更新的仓库点击clone or download（绿色的）4、创建一个远程仓库，在文件夹中运行git bash执行以下指令1$ git remote add XXX https://xxxx add后面的XXX就是创建的远程仓库的名字（可以用git remote查看远程仓库有哪些）https://xxxx 是clone的网址5、把远程仓库的数据升级，在文件中运行git bash 执行以下指令1$ git remote updata XXX 6、从远程的仓库中把数据下载到本地1$ git pull XXX master 在以后更新的时候只需在git bash中执行以下指令12$ git remote update$ git pull XXX master]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2F2018%2F05%2F17%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[1.变量的作用域Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量 函数内部可以直接读取全局变量1234567var n= 999;function f1()&#123; alert(n);&#125; f1();// 999 但是函数外部无法读取函数内的局部变量 function f1(){ var n =999; } alert(n);//error 注意! 在函数内部声明变量的时候，一定要使用var命令，如果你不用的话，实际上就是声明了一个全局变量 function f1(){ n=999; } f1(); alert(n); //999 &lt; !-- more --&gt; 2.如何从外部读取局部变量有的时候我们需要得到函数内部的局部变量，正常情况下是不能实现的，就需要我们在函数的内部再定义一个函数。 function f1(){ var n=999; function f2(){ alert(n); //999 } } 在上面可以看出，函数f2就包括在函数f1里面，这时f1内部的所有局部变量，对f2都是可见的。但是f2内的局部变量对f1是不可见的。这就是JS中的“链式作用域”，子对象会一级一级的向上寻找所有父对象的变量。所以父对象的所有变量，对子对象都是可见的，反之则不成立。 既然f2可以读取f1中的变量，那么把f2作为返回值，就可以在f1外部读取它内部的变量。 function f1(){ var n =999; function f2(){ alert (n); } } var result = f1(); result(); //999 3.闭包的概念上一节的代码中的f2函数，就是闭包 闭包比较简单的理解就是：能够读取其他函数内部变量的函数。 在JS中只有函数内部的子函数才能够读取局部变量，因此可以把闭包简单的理解成是“定义在一个函数内部的另一个函数”。闭包本质上就是函数内部和函数外部连接起来的一座桥梁。 4.闭包的用途闭包可以用在很多的地方。一、可以读取函数内部的变量二、让这些变量的值始终保持在内存中。 function f1(){ var n=999; nAdd=function(){n+=1} function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999 nAdd(); result(); // 1000 可以看出来在这段函数中，result就是闭包函数f2。它一共运行了两次，第一次的到的值是999，第二次是1000。按照正常情况来说，在f1调用之后它内部的局部变量应该被自动清除，但是第二次能得到1000，是因为f2被赋予给了一个全局变量result，f2始终存再内存中，而f2有依赖于f1，因此f1也始终在内存中，不会再调用结束后，被垃圾回收机制回收。 在f1中还有一个函数“nAdd=function(){n+=1}”值得注意，这是一个全局变量，前面没有var，nAdd的值也是一个匿名函数，这个匿名函数也是一个闭包，可以在函数的外部对内部的局部变量进行操作。 5.使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 6.思考题一、 var name = &quot;The Window&quot;; var object = { name : &quot;My Object&quot;； getNameFunc : function(){ return function(){ return this.name; }; } }; alert(object.getNameFunc()()); alert里面的值this.name,并且在全局作用下调用。this.name相当于指向的是window.name这个属性。答案是this。window 二、 var name = &quot;The Window&quot;; var object = { name : &quot;My Object&quot;； getNameFunc : function(){ var that = this; return function(){ return that.name; }; } }; alert(object.getNameFunc()()); 这种情况下，getNameFunc在它的局部作用中声明了一个变量 that=this。alert在外部调用了这个函数，that.name又在它的父对象中找到了that的值。答案是my object]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
